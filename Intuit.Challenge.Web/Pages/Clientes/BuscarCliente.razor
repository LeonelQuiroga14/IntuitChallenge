@page "/clientes/buscar"
@using Intuit.Challenge.Web.Models;
@using Intuit.Challenge.Web.Shared.Components.Clientes
@using Intuit.Challenge.Web.Utilities;
@inject IHttpClientFactory _httpClientFactory
@inject SweetAlertService swal;
@inject NavigationManager navigationManager;
<h3>Buscar Cliente</h3>
<div class="row g-3 align-items-center mb-3">
    <div class=" col-sm-8">
        <input type="text" class="form-control" id="nombre" placeholder="Escriba el nombre y presione enter para buscar"
        @bind-value="nombre" @bind-value:event="oninput"
        @onkeypress="@(async (KeyboardEventArgs e) => await NombreKeyPress(e))"/>
        
    </div>
    <div class=" col-sm-8">
        <button class="btn btn-outline-danger" @onclick="@LimpiarFiltros" type="button">Limpiar</button>
    </div>
</div>

<ListadoClientes Clientes="Clientes" CargarClientes="CargarClientes"/>
@code {
    private string nombre;
    List<ClienteModel> Clientes;
    protected override void OnInitialized()
    {
        Clientes = new();
    }
    private async Task NombreKeyPress(KeyboardEventArgs e)
    {
        if(e.Key == "Enter")
        {
            await FiltrarClientes();
        }
    }
    private async Task FiltrarClientes()
    {
        var _httpClient = _httpClientFactory.CreateClient(AppConstants.WEB_API_CLIENT);
        Clientes = await _httpClient.GetFromJsonAsync<List<ClienteModel>>($"cliente/search?nombre={nombre}");
    }
    private void CargarClientes()
    {
        Clientes = new();
        nombre = default;
    }
    private void LimpiarFiltros()
    {
        
        nombre = default;
    }
}
